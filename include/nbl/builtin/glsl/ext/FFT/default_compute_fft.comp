#ifndef USE_SSBO_FOR_INPUT
#error "USE_SSBO_FOR_INPUT should be defined."
#endif

#ifndef _NBL_GLSL_WORKGROUP_SIZE_
#define _NBL_GLSL_WORKGROUP_SIZE_ 256
#endif
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;
 
#define _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_
#define _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_
#include "nbl/builtin/glsl/ext/FFT/fft.glsl"

// Input Descriptor

#ifndef _NBL_GLSL_EXT_FFT_INPUT_SET_DEFINED_
#define _NBL_GLSL_EXT_FFT_INPUT_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_FFT_INPUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_FFT_INPUT_BINDING_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_FFT_INPUT_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_EXT_FFT_INPUT_DESCRIPTOR_DEFINED_

#if USE_SSBO_FOR_INPUT > 0
layout(set=_NBL_GLSL_EXT_FFT_INPUT_SET_DEFINED_, binding=_NBL_GLSL_EXT_FFT_INPUT_BINDING_DEFINED_) readonly restrict buffer InputBuffer
{
	nbl_glsl_complex inData[];
};
#else 
layout(set=_NBL_GLSL_EXT_FFT_INPUT_SET_DEFINED_, binding=_NBL_GLSL_EXT_FFT_INPUT_BINDING_DEFINED_) uniform sampler2D inputImage;
#endif

#endif

// Output Descriptor

#ifndef _NBL_GLSL_EXT_FFT_OUTPUT_SET_DEFINED_
#define _NBL_GLSL_EXT_FFT_OUTPUT_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_FFT_OUTPUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_FFT_OUTPUT_BINDING_DEFINED_ 1
#endif

#ifndef _NBL_GLSL_EXT_FFT_OUTPUT_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_EXT_FFT_OUTPUT_DESCRIPTOR_DEFINED_
layout(set=_NBL_GLSL_EXT_FFT_OUTPUT_SET_DEFINED_, binding=_NBL_GLSL_EXT_FFT_OUTPUT_BINDING_DEFINED_) restrict buffer OutputBuffer
{
	nbl_glsl_complex outData[];
};
#endif

// Get/Set Data Function

layout(push_constant) uniform PushConstants
{
	layout (offset = 0) nbl_glsl_ext_FFT_Parameters_t params;
} pc;

 nbl_glsl_ext_FFT_Parameters_t nbl_glsl_ext_FFT_getParameters() {
	 nbl_glsl_ext_FFT_Parameters_t ret;
	 ret = pc.params;
	 return ret;
 }

void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	uvec4 strided = nbl_glsl_ext_FFT_Parameters_t_getOutputStrides()*uvec4(coordinate,channel);
	outData[strided.x+strided.y+strided.z+strided.w] = complex_value;
}

nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(in uvec3 coordinate, in uint channel) 
{
#if USE_SSBO_FOR_INPUT > 0
	uvec3 max_coord = nbl_glsl_ext_FFT_Parameters_t_getInputDimensions() - uvec3(1u);
	uvec3 clamped_coord = min(coordinate, max_coord);
	
	bool is_out_of_range = any(bvec3(coordinate!=clamped_coord));

	uint paddingType = nbl_glsl_ext_FFT_Parameters_t_getPaddingType();

	if (_NBL_GLSL_EXT_FFT_FILL_WITH_ZERO_ == paddingType && is_out_of_range)
		return nbl_glsl_complex(0, 0);
	
	uvec4 strided = nbl_glsl_ext_FFT_Parameters_t_getInputStrides()*uvec4(clamped_coord,channel);
	return inData[strided.x+strided.y+strided.z+strided.w];
#else
	const int lod = 0;
	vec2 normalizedCoords = (vec2(coordinate.xy) + vec2(0.5f)) / vec2(textureSize(inputImage,lod));
	return nbl_glsl_complex(textureLod(inputImage,normalizedCoords,lod)[channel], 0.0f);
#endif
}

void main()
{
    const uint numChannels = nbl_glsl_ext_FFT_Parameters_t_getNumChannels();
	for(uint ch = 0u; ch < numChannels; ++ch)
		nbl_glsl_ext_FFT(nbl_glsl_ext_FFT_Parameters_t_getIsInverse(), ch);
}